import groovy.json.JsonOutput
pipeline { 
    environment { 
        PRODUCT_VERSION = "2"  
        SERVICE_A_VERSION= '1.35'  
        SERVICE_B_VERSION= '1.4.6'
        SERVICE_C_VERSION= '1.7.8' 
        REPO_URL = 'https://github.com/norelnorel3/docker-image.git'
        DATE = new Date().format("dd-MM-yyyy")
    }

    agent {
        kubernetes {
            label 'kubernetes'
            inheritFrom 'default'  // Using the default pod template
        }
    }


    stages {
        stage('Cloning our Git') { 
            steps { 
                git branch: 'master', url: REPO_URL
            }
        } 
    
        stage('Check and update versios file') {
            steps {
                script {
                    dir('version control') {
                        
                    def versionsFile = readFile file: 'versions.json'
                    def versionsJson = readJSON text: versionsFile

                    def lastVersion = versionsJson[-1].product
                    
                    def currentProductVersion = lastVersion.version
                    def currentServiceAVersion = lastVersion.services.service_a
                    def currentServiceBVersion = lastVersion.services.service_b
                    def currentServiceCVersion = lastVersion.services.service_c                                                        

                    if ( currentProductVersion != PRODUCT_VERSION ||
                        currentServiceAVersion != SERVICE_A_VERSION ||
                        currentServiceBVersion != SERVICE_B_VERSION ||
                        currentServiceCVersion != SERVICE_C_VERSION  ) {

                        def newVersion = [
                            "product": [
                                "name": "Product X",
                                "version": env.PRODUCT_VERSION,
                                "date": env.DATE,
                                "services": [
                                    "service_a": env.SERVICE_A_VERSION,
                                    "service_b": env.SERVICE_B_VERSION,
                                    "service_c": env.SERVICE_C_VERSION
                                ]
                            ]
                        ]

                        versionsJson <<  newVersion                          
                        writeJSON file: 'versions.json', json: versionsJson, pretty: 4

                        echo  "Updated versionsJson content: ${versionsJson}" 
                        
                        withCredentials([gitUsernamePassword(credentialsId: 'git_credentials')]) {
                        sh '''
                        git config user.name "jenkins"
                        git config user.email "jenkins@norel.com"                        
                        git add versions.json
                        git commit -m 'Added new version to versions.json'       
                        git push -u origin master
                        
                        '''
                        
                            }             
                        }

                    else {
                        
                        echo "No versions has been changed"
                        
                    }    

                }
            }
        }    
    }

}
} 