import groovy.json.JsonOutput


pipeline { 
    parameters {
        string(name: 'PRODUCT_VERSION', defaultValue: '2', description: 'Product version')
        string(name: 'SERVICE_A_VERSION', defaultValue: '1.35', description: 'Service A version')
        string(name: 'SERVICE_B_VERSION', defaultValue: '1.4.6', description: 'Service B version')
        string(name: 'SERVICE_C_VERSION', defaultValue: '1.7.8', description: 'Service C version')
    }
    
    environment {
        REPO_URL = 'https://github.com/norelnorel3/docker-image.git'
        DATE = new Date().format("dd-MM-yyyy")
    }

    agent {
        kubernetes {
            label 'kubernetes'
            inheritFrom 'default'  // Using the default pod template
        }
    }


    stages {
        stage('Cloning our Git') { 
            steps { 
                git branch: 'master', url: REPO_URL
            }
        } 
    
        stage('Check and update versios file') {
            steps {
                script {
                    dir('version control') {
                        
                    def versionsFile = readFile file: 'versions.json'
                    def versionsJson = readJSON text: versionsFile

                    def lastVersion = versionsJson[-1].product
                    
                    def currentProductVersion = lastVersion.version
                    def currentServiceAVersion = lastVersion.services.service_a
                    def currentServiceBVersion = lastVersion.services.service_b
                    def currentServiceCVersion = lastVersion.services.service_c                                                        

                    if ( currentProductVersion != params.PRODUCT_VERSION || 
                        currentServiceAVersion != params.SERVICE_A_VERSION ||
                        currentServiceBVersion != params.SERVICE_B_VERSION ||
                        currentServiceCVersion != params.SERVICE_C_VERSION   ) {
                        
                        def newProductVersion = currentProductVersion.toFloat() +1 

                        def newVersion = [
                            "product": [
                                "name": "Product X",
                                "version": newProductVersion.toString(),
                                "date": env.DATE,
                                "services": [
                                    "service_a": params.SERVICE_A_VERSION,
                                    "service_b": params.SERVICE_B_VERSION,
                                    "service_c": params.SERVICE_C_VERSION
                                ]
                            ]
                        ]

                        //versionsJson <<  newVersion
                        versionsJson.add(newVersion)                          
                        writeJSON file: 'versions.json', json: versionsJson, pretty: 4

                        echo  "Updated versionsJson content: ${versionsJson}" 
                        
                        withCredentials([gitUsernamePassword(credentialsId: 'git_credentials')]) {
                        sh '''
                        git config user.name "jenkins"
                        git config user.email "jenkins@norel.com"                        
                        git add versions.json
                        git commit -m 'Added new version to versions.json'       
                        git push -u origin master
                        '''
                        
                            }             
                        }

                    else {
                        
                        echo "No versions has been changed"
                        
                    }    

                }
            }
        }    
    }

}
} 